#BlueJ class context
comment0.target=PixelArtWorld
comment0.text=\n\ This\ program\ runs\ the\ pixel\ art\ minigame.\n\ \n\ @author\ Gloria\ Chan\n\ @version\ \!\!\ DATE\ \!\!\n\ CREDIT\:\ Mr.\ Cohen\ for\ his\ Timer\ class.\n
comment1.params=mainWorld
comment1.target=PixelArtWorld(MainWorld)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ MyWorld.\n\ \n
comment10.params=
comment10.target=void\ started()
comment10.text=\n\ This\ method\ is\ called\ by\ the\ Greenfoot\ system\ when\ the\ execution\ has\ started.\n\ Play\ background\ sound\ in\ loop\ once\ the\ execution\ has\ started.\n
comment11.params=
comment11.target=void\ stopped()
comment11.text=\n\ This\ method\ is\ called\ by\ the\ Greenfoot\ system\ when\ the\ execution\ has\ stopped.\n\ Pause\ background\ sound\ once\ the\ execution\ has\ stopped\ so\ that\ when\ it\n\ started\ again,\ the\ sound\ will\ play\ coherently.\n
comment12.params=
comment12.target=void\ startTimer()
comment12.text=\n\ Start\ the\ Timer\n
comment13.params=
comment13.target=void\ endTimer()
comment13.text=\n\ Stop\ the\ Timer\n
comment14.params=
comment14.target=void\ resetTimer()
comment14.text=\n\ Reset\ the\ Timer\n
comment15.params=
comment15.target=java.lang.String\ getTimeString()
comment15.text=\n\ Returns\ elapsed\ time\ as\ a\ neatly\ formatted\ String.\ Most\ practical\ for\n\ applications\ where\ output\ (rather\ than\ calculation)\ is\ the\ goal.\ The\n\ exact\ format\ will\ depend\ on\ the\ time\ elapsed\ -\ either\ ms,\ sec,\ or\ min\:sec.\n\ \n\ @return\ String\ neatly\ formatted\ display\ of\ time\ elapsed\n
comment16.params=
comment16.target=int\ getTimeInSeconds()
comment16.text=\n\ Return\ the\ elapsed\ time\ in\ seconds.\ This\ assumes\ that\ the\ timer\ has\ already\n\ been\ started\ and\ stopped\ (but\ not\ reset).\ For\ very\ short\ durations,\ this\ will\n\ return\ zero\ even\ though\ some\ time\ has\ elapsed.\n\ \n\ @return\ int\ \ The\ number\ of\ seconds\ elapsed,\ as\ an\ int.\n
comment17.params=
comment17.target=float\ getTimeInPreciseSeconds()
comment17.text=\n\ Return\ the\ elapsed\ time\ in\ seconds.\ This\ assumes\ that\ the\ timer\ has\ already\n\ been\ started\ and\ stopped\ (but\ not\ reset).\ For\ very\ short\ durations,\ this\ will\n\ return\ zero\ even\ though\ some\ time\ has\ elapsed.\n\ \n\ @return\ float\ \ The\ number\ of\ seconds\ elapsed,\ as\ an\ int.\n
comment18.params=
comment18.target=float\ getTimeInMilliseconds()
comment18.text=\n\ Return\ the\ elapsed\ time\ in\ seconds.\ This\ assumes\ that\ the\ timer\ has\ already\n\ been\ started\ and\ stopped\ (but\ not\ reset).\ This\ will\ return\ the\ value\ as\ a\ \n\ float\ and\ is\ most\ useful\ for\ shorter\ durations\ where\ second\ is\ not\ accurate\n\ enough.\n\ \n\ @return\ float\ \ The\ number\ of\ milliseconds\ elapsed,\ as\ a\ float.\n
comment2.params=
comment2.target=void\ act()
comment3.params=length\ height
comment3.target=void\ makeGrid(int,\ int)
comment4.params=numColours
comment4.target=void\ makeColourBar(int)
comment5.params=
comment5.target=void\ addColors()
comment6.params=
comment6.target=void\ changeColours()
comment7.params=
comment7.target=greenfoot.Color[]\ returnColourList()
comment8.params=
comment8.target=greenfoot.Color\ returnColour()
comment9.params=
comment9.target=boolean\ returnCompletion()
numComments=19
